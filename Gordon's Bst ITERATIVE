//function definitions defined within "BST.h" because VS2012 did not like the file seperation (LNK 2005 error)
#ifndef BST_H
#define BST_H
#include <queue> //using stl queue for breadth first
#include <iostream>
#include <string>
#include "node.h"
#include "People.h"

using namespace std;

class BST
{
private:
	Node* root; // Pointer to Node
public:
	// Constructor
	BST();
	// Binary Search Tree Functions
	Node* getRoot()const;
	void setRoot(Node*); 

	void addByName(People);
	void addByBirthdate(People);

	Node* SearchName(string); //Node* return type, might be planning on using the pointer directly

	void removeByName(string);
	void removeByBirthdate(string);

	void print_post_order(); //referenced from cplusplus.com
	void post_order(Node*, ofstream&);

	void print_breadth_first(); //referenced from cplusplus.com
	void breadth_first(Node);

};

BST::BST()
{
	/*	Pre: none
		Post: set root to nullptr
		Return:	none	*/
	root = nullptr;
}


Node* BST::getRoot()const
{
	/*	Pre: none
		Post: none
		Return:	root */
	return root;
}

void BST::setRoot(Node* node)
{
	/*	Pre: a Node pointer
		Post: set root to the Node pointer
		Return: none	*/
	root = node;
}

void BST::addByName(People aPerson)
{
	/*	Pre: a People object
		Post: add the person object to a branch of the tree as a leaf
		Return:	none	*/
	Node* aNode = new Node(aPerson);
	Node* parent = nullptr;

	if(root == nullptr)
	{
		root = new Node(aPerson);
	}
	else
	{
		Node* current;
		current = root;
		
		while(current != nullptr)
		{
			parent = current;
			if(aPerson.getname() > current->getData().getname())
			{
				current = current->getRightChildPtr();
			}
			else
			{
				current = current->getLeftChildPtr();
			}
		}

		if (aPerson.getname() < parent->getData().getname())
			parent->setLeftChildPtr(aNode);
		else
			parent->setRightChildPtr(aNode);
	}
	cout << "Person added to tree by Name." << endl;
}

void BST::addByBirthdate(People aPerson)
{
	/*	Pre: a People object
		Post: add the person object to a branch of the tree as a leaf
		Return:	none	*/
	Node* aNode = new Node(aPerson);
	Node* parent = nullptr;

	if(root == nullptr)
	{
		root = new Node(aPerson);
	}
	else
	{
		Node* current;
		current = root;
		
		while(current != nullptr)
		{
			parent = current;
			if(aPerson.getbirthdate() > current->getData().getbirthdate())
			{
				current = current->getRightChildPtr();
			}
			else
			{
				current = current->getLeftChildPtr();
			}
		}

		if (aPerson.getbirthdate() < parent->getData().getbirthdate())
			parent->setLeftChildPtr(aNode);
		else
			parent->setRightChildPtr(aNode);
	}
	cout << "Person added to tree by Birthdate." << endl;
}

Node* BST::SearchName(string name)
{
	/*	Pre: a name
		Post: none
		Return:	a pointer to the node where the name was found*/
	Node* current;
	current = root;
	Node* parent = nullptr;

	while(current->getData().getname() != name) //traverse tree and search for name
	{
		parent = current;
		if(name > current->getData().getname())
		{
			current = current->getRightChildPtr();
		}
		else
		{
			current = current->getLeftChildPtr();
		}
		
		if(current == nullptr)
		{
			return nullptr;
		}
	}
	return current;
}

void BST::removeByName(string name)//name actually can be person name or birthdate
{
	/*	Pre: a name
		Post: node with the given name is removed from the tree and pointers are rebound
		Return:	none */
	Node* current;
	current = root;
	Node* parent = nullptr;

	while(current->getData().getname() != name) //traverse tree and search for name
	{
		parent = current;
		if(name > current->getData().getname())
		{
			current = current->getRightChildPtr();
		}
		else
		{
			current = current->getLeftChildPtr();
		}

		if(current == nullptr)//if we never find the name
		{
			cout << "No entry by that name exists." << endl;
			return;
		}
	}

	//removing leaf node
	if(current->isLeaf())
	{
		if(parent->getLeftChildPtr() == current)
		{
			parent->setLeftChildPtr(nullptr);
		}
		else
		{
			parent->setRightChildPtr(nullptr);
		}
		delete current;
		cout << "Entry deleted (by Name). (Leaf)" << endl;
		return;
	}
	
	//case: has left child but no right child
	if((current->getLeftChildPtr() != nullptr) && (current->getRightChildPtr() == nullptr))
	{
		if(parent->getLeftChildPtr() == current)
		{
			parent->setLeftChildPtr(current->getLeftChildPtr());
			delete current;
		}
		else
		{
			parent->setRightChildPtr(current->getLeftChildPtr());
			delete current;
		}
		cout << "Entry deleted (by Name). (Left Child)" << endl;
		return;
	}

	//case: has right child but no left child
	if((current->getLeftChildPtr() == nullptr) && (current->getRightChildPtr() != nullptr))
	{
		if(parent->getLeftChildPtr() == current)
		{
			parent->setLeftChildPtr(current->getRightChildPtr());
			delete current;
		}
		else
		{
			parent->setRightChildPtr(current->getRightChildPtr());
			delete current;
		}
		cout << "Entry deleted (by Name). (Right Child)" << endl;
		return;
	}

	//case: has 2 children
	//logic: when we delete a node, replace it with the smallest value in
	//		 the right subtree of the node we are deleting then delete
	//		 that node
	if((current->getLeftChildPtr() != nullptr) && (current->getRightChildPtr() != nullptr))
	{
		Node* check;
		check = current->getRightChildPtr();

		//if right node is a leaf, replace current node with it and set right node to nullptr
		if((check->getLeftChildPtr() == nullptr) && (check->getRightChildPtr() == nullptr))
		{
			current->setData(check->getData());
			delete check;
			current->setRightChildPtr(nullptr);
		}
		else //traverse right side to find smallest element if right node has left child
		{
			if(current->getRightChildPtr()->getLeftChildPtr() != nullptr)
			{
				//new reference pointers not to be confused with initial parent/current pointers,
				//which will allow us to travers the tree further
				Node* parent2 = current->getRightChildPtr();
				Node* current2 = current->getRightChildPtr()->getLeftChildPtr();

				while(current2->getLeftChildPtr() != nullptr)//find smallest element in the subtree
				{
					parent2 = current2;
					current2 = current2->getLeftChildPtr();
				}

				current->setData(current2->getData()); //replacing node (see logic above)
				delete current2;
				parent2->setLeftChildPtr(nullptr); //delete node we used to replace the node we wanted to deleted
			}
			else //if nothing on the left of subtree
			{
				Node* temp = current->getRightChildPtr();
				current->setData(temp->getData());
				current->setRightChildPtr(temp->getRightChildPtr());
				delete temp;
			}
		}
		cout << "Entry deleted (by Name). (2 Children)" << endl;
		return;
	}
}

void BST::removeByBirthdate(string birthdate)//SEE removeByName fuction, identical except for the 
{											 //string you test against (birthdate instead of name)
	/*	Pre: a birthdate
		Post: node with the given birthdate is removed from the tree and pointers are rebound
		Return:	none */
	Node* current;
	current = root;
	Node* parent = nullptr;

	while(current->getData().getbirthdate() != birthdate) //traverse tree and search for name
	{
		parent = current;
		if(birthdate > current->getData().getbirthdate())
		{
			current = current->getRightChildPtr();
		}
		else
		{
			current = current->getLeftChildPtr();
		}

		if(current == nullptr)
		{
			cout << "No entry by that birthdate exists." << endl;
			return;
		}
	}

	//removing leaf node
	if(current->isLeaf())
	{
		if(parent->getLeftChildPtr() == current)
		{
			parent->setLeftChildPtr(nullptr);
		}
		else
		{
			parent->setRightChildPtr(nullptr);
		}
		delete current;
		cout << "Entry deleted (by birthdate). (Leaf)" << endl;
		return;
	}
	
	//case: has left child but no right child
	if((current->getLeftChildPtr() != nullptr) && (current->getRightChildPtr() == nullptr))
	{
		if(parent->getLeftChildPtr() == current)
		{
			parent->setLeftChildPtr(current->getLeftChildPtr());
			delete current;
		}
		else
		{
			parent->setRightChildPtr(current->getLeftChildPtr());
			delete current;
		}
		cout << "Entry deleted (by birthdate). (Left Child)" << endl;
		return;
	}

	//case: has right child but no left child
	if((current->getLeftChildPtr() == nullptr) && (current->getRightChildPtr() != nullptr))
	{
		if(parent->getLeftChildPtr() == current)
		{
			parent->setLeftChildPtr(current->getRightChildPtr());
			delete current;
		}
		else
		{
			parent->setRightChildPtr(current->getRightChildPtr());
			delete current;
		}
		cout << "Entry deleted (by birthdate). (Right Child)" << endl;
		return;
	}

	//case: has 2 children
	//logic: when we delete a node, replace it with the smallest value in
	//		 the right subtree of the node we are deleting then delete
	//		 that node
	if((current->getLeftChildPtr() != nullptr) && (current->getRightChildPtr() != nullptr))
	{
		Node* check;
		check = current->getRightChildPtr();

		//if right node is a leaf, replace current node with it and set right node to nullptr
		if((check->getLeftChildPtr() == nullptr) && (check->getRightChildPtr() == nullptr))
		{
			current->setData(check->getData());
			delete check;
			current->setRightChildPtr(nullptr);
		}
		else //traverse right side to find smallest element if right node has left child
		{
			if(current->getRightChildPtr()->getLeftChildPtr() != nullptr)
			{
				Node* parent2 = current->getRightChildPtr();
				Node* current2 = current->getRightChildPtr()->getLeftChildPtr();

				while(current2->getLeftChildPtr() != nullptr)
				{
					parent2 = current2;
					current2 = current2->getLeftChildPtr();
				}

				current->setData(current2->getData());
				delete current2;
				parent2->setLeftChildPtr(nullptr);
			}
			else
			{
				Node* temp = current->getRightChildPtr();
				current->setData(temp->getData());
				current->setRightChildPtr(temp->getRightChildPtr());
				delete temp;
			}
		}
		cout << "Entry deleted (by birthdate). (2 Children)" << endl;
		return;
	}
}

void BST::print_post_order()
{
	/*	Pre: none
		Post: feed first node off dummy node to post_order() function
		Return:	none */
	ofstream outfile;
	outfile.open("byName_post_order.txt");

	if(root->getRightChildPtr() == nullptr)
		return; //print nothing if tree is empty besides dummy node
	post_order(root->getRightChildPtr(), outfile); //this will prevent dummy node from being written

	outfile.close();

}

void BST::post_order(Node* aNode, ofstream& outfile)
{
	/*	Pre: the node off of the dummy pointer, and the outfile stream
		Post: print post ordered tree to file
		Return:	none */
	if(aNode != nullptr)
	{
		//recursive calls that unwind into post-order output
		if(aNode->getLeftChildPtr())//recurse left
			post_order(aNode->getLeftChildPtr(), outfile);
		if(aNode->getRightChildPtr())//recurse right
			post_order(aNode->getRightChildPtr(), outfile);
		outfile << aNode->getData().getname() << ", " << aNode->getData().getbirthdate() << endl;
	}
	else
	{
		return;
	}
}

void BST::print_breadth_first()
{
	/*	Pre: none
		Post: feed first node off dummy node to breadth_first() function
		Return:	none */
	if(root->getRightChildPtr() == nullptr)
		return; //print nothing if tree is empty besides dummy node
	breadth_first(*(root->getRightChildPtr())); //this will prevent dummy node from being written
}

void BST::breadth_first(Node aNode)
{
	/*	Pre: the node off of the dummy pointer
		Post: print post ordered tree to file
		Return:	none */
	queue<Node> nodes; //using stl queue
	nodes.push(aNode); //push node that is right off dummy node
	Node current;
	ofstream outfile;
	outfile.open("byBirthdate_breadth_first.txt");

	while (nodes.empty() == false) //loop while stack is not empty
	{
		current = nodes.front();
		outfile << current.getData().getname() << ", " << current.getData().getbirthdate() << endl; //inspect front node
		nodes.pop(); //pop front node
		if(current.getLeftChildPtr() != nullptr) //queue left child if it exists
			nodes.push(*(current.getLeftChildPtr()));
		if(current.getRightChildPtr() != nullptr) //queue right child if it exists
			nodes.push(*(current.getRightChildPtr()));
	}
	outfile.close();
}

//#include "BST.cpp"
#endif
